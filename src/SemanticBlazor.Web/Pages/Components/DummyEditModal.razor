<SemModal @ref="modal">
  <Header>
    @headerText
  </Header>
  <Content>
    @if (Item != null)
    {
      <SemForm Model="@Item" class="ui form" OnSubmit="FormSubmited">
        <SemFormField For="@(() => Item.DummyId)" IsEditable="false">
          @Item.DummyId
        </SemFormField>

        <SemFormField For="@(() => Item.Name)">
          <SemInput @bind-Value="Item.Name"></SemInput>
        </SemFormField>

        <SemFormField For="@(() => Item.Enabled)" ShowLabel="false">
          <SemCheckbox @bind-Value="Item.Enabled" Label="@Annotations.GetNameFor(() => Item.Enabled)"></SemCheckbox>
        </SemFormField>

        <SemFormField For="@(() => Item.Description)">
          <InputTextArea @bind-Value="Item.Description"></InputTextArea>
        </SemFormField>

        <div class="two fields">
          <SemFormField For="@(() => Item.Type)">
            <SemDataDropdownSelection @bind-Value="Item.Type" Items="@types"></SemDataDropdownSelection>
          </SemFormField>

          <SemFormField For="@(() => Item.Flags)">
            <SemDataDropdownMultiSelection @bind-Value="Item.Flags" Items="@flags"></SemDataDropdownMultiSelection>
          </SemFormField>
        </div>

        <SemFormField For="@(() => Item.Flags)">
          <SemDataCheckboxList @bind-Value="Item.Flags" Items="@flags"></SemDataCheckboxList>
        </SemFormField>

        <SemFormField For="@(() => Item.Created)" IsEditable="false">
          @Item.Created
        </SemFormField>

        <SemFormField For="@(() => Item.LastUpdate)" IsEditable="false">
          @Item.LastUpdate
        </SemFormField>
      </SemForm>
    }
  </Content>
  <Actions>
    <SemButton Class="deny">Cancel</SemButton>
    <SemButton Class="primary" OnClick="() => modal.SubmitForm()">Save</SemButton>
  </Actions>
</SemModal>

@code {
  [Parameter] public Data.DummyData Item { get; set; }
  [Parameter] public EventCallback<Data.DummyData> ItemChanged { get; set; }
  public string headerText { get; set; }
  public SemModal modal { get; set; }

  //TEMP
  string[] types;
  string[] flags;

  protected override void OnInitialized()
  {
    types = new string[] { "Dummy type 1", "Dummy type 2", "Dummy type 3" };
    flags = new string[] { "DM1", "ABC", "DEF", "GHI", "JKL", "MNO", "PRQ", "STU", "VWX", "XYZ" };
  }

  public async Task Show(Data.DummyData dummyItem)
  {
    Item = dummyItem;
    headerText = $"Dummy - {dummyItem.Name}";
    StateHasChanged();
    await modal.Show();
  }

  async Task FormSubmited()
  {
    await ItemChanged.InvokeAsync(Item);
    await modal.Hide();
  }
}
