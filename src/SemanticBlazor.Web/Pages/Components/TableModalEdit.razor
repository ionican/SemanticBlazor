@page "/Components/TableModalEdit"
@layout ComponentsLayout
@inject Data.DummyDataService DummyDataService
@inject NotificationService NotificationService

<h1>Advanced table</h1>
<p>
  Advanced table with server (API) pagination, sorting and searching and editation via modal dialog.
</p>

<SemGrid>
  <SemGridColumn Wide="GridUnit.Eight" Classes="@(new[] { ColumnClass.Right_Floated, ColumnClass.Right_Aligned })">
    <SemSearchActionButton OnSearch="(() => table.RefreshData())" @bind-Value="searchExpr"></SemSearchActionButton>
  </SemGridColumn>
</SemGrid>
<SemDataTable @ref="table" DataMethod="GetData" CountMethod="GetCount" AllowPaging="true" AllowSorting="true" DefaultPageSize="5" EmptyDataMessage="No dummy data found...">
  <Columns>
    <SemDataTableColumn TItem="Data.DummyData" HeaderText="Name" SortExpression="Name">
      <ItemTemplate>
        <a @onclick="@(() => ShowEditModal(context.DummyId))">[@context.DummyId] @context.Name</a>
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem="Data.DummyData" HeaderText="Description" SortExpression="Description" ItemText="@(a => a.Description)"></SemDataTableColumn>
    <SemDataTableColumn TItem="Data.DummyData" HeaderText="Type" SortExpression="Type">
      <ItemTemplate>
        <SemLabel Visible="context.Type != null" Size="Size.Small">@context.Type</SemLabel>
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem="Data.DummyData" HeaderText="Flags">
      <ItemTemplate>
        @if (context.Flags != null)
        {
          @foreach (var flag in context.Flags)
          {
            <SemLabel Visible="!String.IsNullOrEmpty(flag)" Size="Size.Small">@flag</SemLabel>
          }
        }
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem="Data.DummyData" HeaderText="Created" SortExpression="Created" ItemText="@(a => a.Created.ToString("dd.MM.yyyy HH:mm:ss"))"></SemDataTableColumn>
    <SemDataTableColumn TItem="Data.DummyData" HeaderText="" HeaderClass="menucol">
      <ItemTemplate>
        <SemDropdownMenu>
          <SemIcon Class="ellipsis horizontal"></SemIcon>
          <SemMenu>
            <SemMenuItem OnClick="(() => ShowEditModal(context.DummyId))">Edit</SemMenuItem>
            <SemDivider></SemDivider>
            <SemMenuItem OnClick="(() => Delete(context.DummyId))" NeedsConfirmation="true" ConfirmationHeader="Delete item" ConfirmationMessage="Are you sure to delete this item?">Delete</SemMenuItem>
          </SemMenu>
        </SemDropdownMenu>
      </ItemTemplate>
    </SemDataTableColumn>
  </Columns>
</SemDataTable>
<DummyEditModal @ref="editModal" ItemChanged="ItemChanged"></DummyEditModal>

<CodeHighlight Code=@(@"
<SemGrid>
  <SemGridColumn Wide=""GridUnit.Eight"" Classes=""@(new[] { ColumnClass.Right_Floated, ColumnClass.Right_Aligned })"">
    <SemSearchActionButton OnSearch=""(async () => await table.RefreshData())"" @bind-Value=""searchExpr""></SemSearchActionButton>
  </SemGridColumn>
</SemGrid>
<SemDataTable @ref=""table"" TItem=""Data.DummyData"" DataMethod=""GetData"" CountMethod=""GetCount"" AllowPaging=""true"" DefaultPageSize=""5"" EmptyDataMessage=""No dummy data found..."">
  <Columns>
    <SemDataTableColumn TItem=""Data.DummyData"" HeaderText=""Name"" SortExpression=""Name"">
      <ItemTemplate>
        <a @onclick=""@(() => ShowEditModal(context.DummyId))"">[@context.DummyId] @context.Name</a>
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem=""Data.DummyData"" HeaderText=""Description"" SortExpression=""Description"" ItemText=""@(a => a.Description)""></SemDataTableColumn>
    <SemDataTableColumn TItem=""Data.DummyData"" HeaderText=""Type"" SortExpression=""Type"">
      <ItemTemplate>
        <SemLabel Visible=""context.Type != null"" Size=""Size.Small"">@context.Type</SemLabel>
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem=""Data.DummyData"" HeaderText=""Flags"">
      <ItemTemplate>
        @if (context.Flags != null)
        {
          @foreach (var flag in context.Flags)
          {
            <SemLabel Visible=""!String.IsNullOrEmpty(flag)"" Size=""Size.Small"">@flag</SemLabel>
          }
        }
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem=""Data.DummyData"" HeaderText="""" HeaderClass=""menucol"">
      <ItemTemplate>
        <SemDropdownMenu>
          <SemIcon Class=""ellipsis horizontal""></SemIcon>
          <SemMenu>
            <SemMenuItem OnClick=""(() => ShowEditModal(context.DummyId))"">Edit</SemMenuItem>
            <SemDivider></SemDivider>
            <SemMenuItem OnClick=""(() => Delete(context.DummyId))"" NeedsConfirmation=""true"" ConfirmationHeader=""Delete item"" ConfirmationMessage=""Are you sure to delete this item?"">Delete</SemMenuItem>
          </SemMenu>
        </SemDropdownMenu>
      </ItemTemplate>
    </SemDataTableColumn>
    <SemDataTableColumn TItem=""Data.DummyData"" HeaderText=""Created"" SortExpression=""Created"" ItemText=""@(a => a.Created.ToString(""dd.MM.yyyy HH:mm:ss""))""></SemDataTableColumn>
  </Columns>
</SemDataTable>") />


@code {
  string searchExpr = "";
  SemDataTable<Data.DummyData> table;

  DummyEditModal editModal;

  async Task<IEnumerable<Data.DummyData>> GetData(DataMethodParams e)
  {
    return await DummyDataService.GetDataAsync(e.StartRowIndex, e.MaximumRows, searchExpr, e.SortExpression, e.SortDirection);
  }

  async Task<int> GetCount()
  {
    return await DummyDataService.GetCountAsync(searchExpr);
  }

  async void ShowEditModal(int dummyId)
  {
    var dummy = await DummyDataService.GetByIdAsync(dummyId);
    await editModal.Show(dummy);
  }

  async void ItemChanged(Data.DummyData item)
  {
    NotificationService.ShowNotification($"Dummy item <b>#{item.DummyId} {item.Name}</b> has been changed.", null, "green");
    await table.RefreshData(false);
  }

  void Delete(int dummyId)
  {
    DummyDataService.Delete(dummyId);
  }
}
