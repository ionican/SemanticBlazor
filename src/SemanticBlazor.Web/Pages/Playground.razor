@page "/playground"
@inherits PageBase
@inject Data.DummyDataService dummyData

@*<SemButton @onclick="@(() => tabs.SetActiveTab("firstTabaaa"))"></SemButton>
<SemTabs @ref="tabs">
  <Tabs>
    <SemTab Name="firstTab">
      <h2>First tab</h2>
    </SemTab>
    <SemTab Name="secondTab">
      <h2>Second tab</h2>
    </SemTab>
    <SemTab Name="lastTab">
      <h2>Last tab</h2>
    </SemTab>
  </Tabs>
</SemTabs>


<SemButton @onclick="@(() => modal1.Show())">Open modal 1</SemButton>
<SemModal @ref="modal1" AllowMultiple="true" CloseIcon="ModalCloseIcon.None">
  <Header>Modal1</Header>
  <Content>
    Test modal 1
  </Content>
  <Actions>
    <SemButton @onclick="@(() => modal2.Show())">Open modal 2</SemButton>
  </Actions>
</SemModal>
<SemModal @ref="modal2" Size="ModalSize.Small" AllowMultiple="true" Closable="false" CloseIcon="ModalCloseIcon.None">
  <Header>Modal2</Header>
  <Content>
    Test modal 2
  </Content>
</SemModal>*@

<SemForm Model="formModel"></SemForm>
<SemFormField For="@(() => formModel.SelectedValue)">
<SemDataDropdownSelection @bind-Value="formModel.SelectedValue" DataMethod="@(() => GetData())" ItemKey="@(e => e.IntValue)" ItemText="@(e => e.StringText)" ValueSelector="@(e => e.IntValue)"></SemDataDropdownSelection>
  @(formModel.SelectedValue.ToString() ?? "n/a")
</SemFormField>



@*<div>
  <SemDataDropdownMultiSelection @bind-Value="SelectedItems" Items="@Data" AllowAdditions="true" Search="true"></SemDataDropdownMultiSelection>
  @(SelectedItems?.Count ?? 0)
  @if (SelectedItems != null)
  {
    string.Join(",", SelectedItems);
  }
</div>*@

@code {
  SemModal modal1;
  SemModal modal2;

  int SelectedItem { get; set; } = 0;
  List<string> SelectedItems { get; set; }
  FormModel formModel { get; set; } = new();

  private class FormModel
  {
    public int SelectedValue { get; set; }
  }

  //List<int> Data = new() {4,3,2,1,0};
  List<TestModel> Data = new()
  {
    new TestModel { IntValue = -1, StringText = "Nic"},
    new TestModel {IntValue = 2, StringText = "[2] Dva"},
    new TestModel {IntValue = 1, StringText = "[1] Jedna"},
    new TestModel { IntValue = 0, StringText = "[0] Nula"}
  };

  private SemTabs tabs;

  private class TestModel
  {
    public int IntValue { get; set; }
    public string StringText { get; set; }
  }

  private async Task<IEnumerable<TestModel>> GetData()
  {
    await Task.Delay(1000);
    return Data;
  }

}