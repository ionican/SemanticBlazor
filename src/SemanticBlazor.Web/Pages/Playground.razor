@page "/playground"
@inherits PageBase
@inject Data.DummyDataService dummyData

@*<SemButton @onclick="@(() => tabs.SetActiveTab("firstTabaaa"))"></SemButton>
<SemTabs @ref="tabs">
  <Tabs>
    <SemTab Name="firstTab">
      <h2>First tab</h2>
    </SemTab>
    <SemTab Name="secondTab">
      <h2>Second tab</h2>
    </SemTab>
    <SemTab Name="lastTab">
      <h2>Last tab</h2>
    </SemTab>
  </Tabs>
</SemTabs>


<SemButton @onclick="@(() => modal1.Show())">Open modal 1</SemButton>
<SemModal @ref="modal1" AllowMultiple="true" CloseIcon="ModalCloseIcon.None">
  <Header>Modal1</Header>
  <Content>
    Test modal 1
  </Content>
  <Actions>
    <SemButton @onclick="@(() => modal2.Show())">Open modal 2</SemButton>
  </Actions>
</SemModal>
<SemModal @ref="modal2" Size="ModalSize.Small" AllowMultiple="true" Closable="false" CloseIcon="ModalCloseIcon.None">
  <Header>Modal2</Header>
  <Content>
    Test modal 2
  </Content>
</SemModal>*@

@* <SemForm Model="formModel"></SemForm> *@
@* <SemFormField For="@(() => formModel.SelectedValue)"> *@
@* <SemDataDropdownSelection @bind-Value="formModel.SelectedValue" DataMethod="@(() => GetData())" ItemKey="@(e => e.IntValue)" ItemText="@(e => e.StringText)" ValueSelector="@(e => e.IntValue)"></SemDataDropdownSelection> *@
@*   @(formModel.SelectedValue.ToString() ?? "n/a") *@
@* </SemFormField> *@

<SemForm Model="_dateModel">
  <SemInput Rows="3" @bind-Value="LongText" Clearable="true"></SemInput><br>
  <InputTextArea rows="3" @bind-Value="LongText"></InputTextArea>
  @LongText
</SemForm>


<SemForm Model="_dateModel">
  <SemFormField For="@(() => _dateModel.DateFrom)" Wide="GridUnit.Eight">
    <SemInput Rows="3" @bind-Value="LongText" Clearable="true"></SemInput>
  </SemFormField>
  <SemFormField For="@(() => _dateModel.DateFrom)" Wide="GridUnit.Eight">
    <InputTextArea rows="3" @bind-Value="LongText"></InputTextArea>
  </SemFormField>
  @LongText
</SemForm>

@*
<SemButton Icon="Icon.Angle_Double_Left" OnClick="@(() => _date = _date.AddDays(-1))"></SemButton>
<SemDateInput @bind-Value="_date" Icon="Icon.Calendar_Alternate_Outline" Style="width: 130px" Changed="@((DateTime _) => { _events.Add(DateTime.Now); StateHasChanged(); })"></SemDateInput>
<SemButton Icon="Icon.Angle_Double_Right" OnClick="@(() => _date = _date.AddDays(1))"></SemButton>
@_date.ToString("dd.MM.yyyy")


<SemForm Model="_dateModel">
  <SemDateInput Id="dateFrom" @bind-Value="@_dateModel.DateFrom" EndDateInputId="dateTo" ></SemDateInput>
  <SemDateInput Id="dateTo" @bind-Value="@_dateModel.DateTo" StartDateInputId="dateFrom"></SemDateInput>
</SemForm>
@_dateModel.DateFrom.ToString("dd.MM.yyyy") - @_dateModel.DateTo.ToString("dd.MM.yyyy")
<br/>
<br/>
@foreach (var date in _events)
{
  @date.ToString("hh:mm:ss.fff")<br/>
}
*@

@*<div>
  <SemDataDropdownMultiSelection @bind-Value="SelectedItems" Items="@Data" AllowAdditions="true" Search="true"></SemDataDropdownMultiSelection>
  @(SelectedItems?.Count ?? 0)
  @if (SelectedItems != null)
  {
    string.Join(",", SelectedItems);
  }
</div>*@

@code {
  SemModal modal1;
  SemModal modal2;

  DateTime _date;
  DateModel _dateModel = new DateModel() {DateFrom = DateTime.Now.Date.AddDays(-1), DateTo = DateTime.Now.Date.AddDays(14)};

  List<DateTime> _events = new List<DateTime>();

  int SelectedItem { get; set; } = 0;
  List<string> SelectedItems { get; set; }
  FormModel formModel { get; set; } = new();

  public string LongText { get; set; }

  private class FormModel
  {
    public int SelectedValue { get; set; }
  }

  //List<int> Data = new() {4,3,2,1,0};
  List<TestModel> Data = new()
  {
    new TestModel {IntValue = -1, StringText = "Nic"},
    new TestModel {IntValue = 2, StringText = "[2] Dva"},
    new TestModel {IntValue = 1, StringText = "[1] Jedna"},
    new TestModel {IntValue = 0, StringText = "[0] Nula"}
  };

  private SemTabs tabs;

  private class TestModel
  {
    public int IntValue { get; set; }
    public string StringText { get; set; }
  }

  private async Task<IEnumerable<TestModel>> GetData()
  {
    await Task.Delay(1000);
    return Data;
  }

  private class DateModel
  {
    public DateTime DateFrom { get; set; }
    public DateTime DateTo { get; set; }
  }

}