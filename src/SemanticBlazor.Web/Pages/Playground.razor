@page "/playground"
@inherits PageBase
@inject Data.DummyDataService dummyData

@*<SemTabs ActiveTabChanged="@((SemTab tab) => TabChanged(tab))">
    <Tabs>
      <SemTab Text="First">
        <p>First</p>
      </SemTab>
      <SemTab Text="Second">
        <p>Second</p>
      </SemTab>
    </Tabs>
  </SemTabs>

  <p>
    <SemDropdownSelection @bind-Value="selectedStringValue" Changed="@((string val) => RefreshChildren())">
      <ListItems>
        <SemSelectListItem Text="Building A" Value="A"></SemSelectListItem>
        <SemSelectListItem Text="Building B" Value="B"></SemSelectListItem>
        <SemSelectListItem Text="Building C" Value="C"></SemSelectListItem>
      </ListItems>
    </SemDropdownSelection>
  </p>
  <p>
    <SemDataDropdownSelection @ref="childDropdown" @bind-Value="selectedDummyData" DataMethod="@(() => GetData(selectedStringValue))" ItemKey="@(dummy => dummy.DummyId)" ItemText="@(dummy => dummy.Name)"></SemDataDropdownSelection>
  </p>
  <p>
    <SemDataRadioButtonList @ref="childRadio" @bind-Value="selectedDummyData" DataMethod="@(() => GetData(selectedStringValue))" ItemKey="@(dummy => dummy.DummyId)" ItemText="@(dummy => dummy.Name)"></SemDataRadioButtonList>
  </p>
  <p>
    <SemDataButtonSwitch @ref="childButtonSwitch" @bind-Value="selectedDummyData" DataMethod="@(() => GetData(selectedStringValue))" ItemKey="@(dummy => dummy.DummyId)" ItemText="@(dummy => dummy.Name)"></SemDataButtonSwitch>
  </p>
  <p>
    Selected value: @(selectedDummyData?.ToString() ?? "null");
  </p>*@

<SemDateInput @bind-Value="dateValue"></SemDateInput>

<SemDateTimeInput @bind-Value="dateValue"></SemDateTimeInput>


<SemForm Model="selectedValue" OnSubmit="FormSubmited">
  <SemFormField For="@(() => selectedValue.Code)">
    <SemInput @bind-Value="selectedValue.Code"></SemInput>
  </SemFormField>
  <SemFormField For="@(() => selectedValue.Name)">
    <SemInput @bind-Value="selectedValue.Name"></SemInput>
  </SemFormField>
  <SemFormField ValueType="string">
    <SemInput @bind-Value="selectedStringValue"></SemInput>
  </SemFormField>
  <SemButton IsSubmitButton="true">Submit</SemButton>
</SemForm>

@code {
  async Task RefreshChildren()
  {
    await childDropdown.RefreshItems();
    await childRadio.RefreshItems();
    await childButtonSwitch.RefreshItems();
  }

  string selectedStringValue { get; set; }
  SemDataDropdownSelection<Data.DummyData, Data.DummyData> childDropdown { get; set; }
  SemDataRadioButtonList<Data.DummyData, Data.DummyData> childRadio { get; set; }
  SemDataButtonSwitch<Data.DummyData, Data.DummyData> childButtonSwitch { get; set; }

  class SomeClass
  {
    public string Name { get; set; }
    public int Code { get; set; }
    public string Description { get; set; }

    public override string ToString()
    {
      return $"{Name}, {Code}, {Description}";
    }
  }

  List<SomeClass> items = new List<SomeClass>() {
    new SomeClass() { Name = "Test Name 1", Code = 10, Description = "First Name" },
    new SomeClass() { Name = "Test Name 2", Code = 20, Description = "Second Name" },
    new SomeClass() { Name = "Test Name 3", Code = 30, Description = "Third Name" }
  };

  SomeClass selectedValue { get; set; } = new SomeClass();
  int selectedIntValue { get; set; } = 10;
  List<SomeClass> selectedValues { get; set; }
  List<int> selectedIntValues { get; set; }

  Data.DummyData selectedDummyData { get; set; }
  int SelectedDummyId { get; set; }
  List<SemanticBlazor.Web.Data.DummyData> dummies = new List<Data.DummyData>();
  async Task<List<Data.DummyData>> GetDummyData() => await dummyData.GetAllDataAsync();

  enum Option
  {
    Option_1,
    Option_2,
    Option_3,
    Option_4
  }
  Option SelectedOption { get; set; }
  List<Option> SelectedOptions { get; set; }

  DateTime dateValue = DateTime.Now;
  DateTime? dateNullValue;
  TimeSpan timeSpanValue = new TimeSpan(10, 30, 00);
  TimeSpan? timeSpanNullValue = new TimeSpan(10, 30, 00);

  protected override async Task OnInitializedAsync()
  {
    //dummies = await GetDummyData();
    //selectedDummyData = dummies.First();
    //selectedValue = items[0];
  }

  async Task<List<Data.DummyData>> GetData(string type)
  {
    await Task.Delay(1000);
    if (string.IsNullOrEmpty(type))
    {
      return null;
    }
    else if (type == "A")
    {
      return new List<Data.DummyData>()
{
        new Data.DummyData() { Name = "A - 01", DummyId = 1 },
        new Data.DummyData() { Name = "A - 02", DummyId = 2 },
      };
    }
    else if (type == "B")
    {
      return new List<Data.DummyData>()
{
        new Data.DummyData() { Name = "B - 01", DummyId = 3 },
        new Data.DummyData() { Name = "B - 02", DummyId = 4 },
      };
    }
    else
    {
      return (await GetData("A")).Concat(await GetData("B")).ToList();
    }

  }
  void TabChanged(SemTab tab)
  {

  }

  void FormSubmited()
  {

  }
}