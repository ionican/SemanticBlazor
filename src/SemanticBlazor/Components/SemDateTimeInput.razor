@typeparam TValue
@inherits SemanticBlazor.Components.Base.Common.SemInputControlBase<TValue>

@if (Visible)
{
  <div class="ui calendar input" style="@Style">
    <div class="date">
      <SemDateInput @ref="_dateInput" Icon="DateIcon" IconPosition="IconPosition" Clearable="Clearable" Placeholder="@Placeholder" Culture="@Culture" Size="Size" Enabled="Enabled" Class="@Class"
                    Value="Value" ValueChanged="@((TValue value) => DateChanged(value))"></SemDateInput>
    </div>
    <div class="time">
      <SemTimeInput @ref="_timeInput" Icon="TimeIcon" IconPosition="IconPosition" Clearable="Clearable" Placeholder="@Placeholder" Culture="@Culture" Size="Size" Enabled="Enabled" Class="@Class"
                    MinutesEnabled="MinutesEnabled" Value="TimeValue" ValueChanged="@((TimeSpan? value) => TimeChanged(value))"></SemTimeInput>
    </div>
  </div>
}

@code {
  public bool AmPm { get; set; } = false;
  [Parameter] public bool MinutesEnabled { get; set; } = true;

  [Parameter] public Icon? TimeIcon { get; set; }
  [Parameter] public Icon? DateIcon { get; set; }
  [Parameter] public IconPosition? IconPosition { get; set; } = SemanticBlazor.IconPosition.Left;
  [Parameter] public bool Clearable { get; set; }
  [Parameter] public string Placeholder { get; set; }
  [Parameter] public string Culture { get; set; }
  [Parameter] public InputSize? Size { get; set; }

  SemDateInput<TValue> _dateInput;
  SemTimeInput<TimeSpan?> _timeInput;

  TimeSpan? TimeValue
  {
    get
    {
      if (Value != null)
      {
        return ((DateTime)(object)Value).TimeOfDay;
      }
      return null;
    }
  }

  async Task DateChanged(object value)
  {
    if (value == null)
    {
      Value = default;
      await _timeInput.ClearValue();
    }
    else
    {
      var dtValue = (DateTime)value;
      if (Value != null) dtValue = dtValue.Add(((DateTime)(object)Value).TimeOfDay);
      Value = (TValue)(object)dtValue;
    }
    await NotifyChanged();
  }
  async Task TimeChanged(object value)
  {
    if (value == null)
    {
      if (Value != null)
      {
        Value = (TValue)(object)((DateTime)(object)Value).Date;
      }
    }
    else
    {
      if (Value != null)
      {
        Value = (TValue)(object)((DateTime)(object)Value).Date.Add((TimeSpan)value);
      }
      else
      {
        Value = (TValue)(object)DateTime.Now.Date.Add((TimeSpan)value);
      }
    }
    await NotifyChanged();
  }
}
