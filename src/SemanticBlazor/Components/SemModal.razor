@using Microsoft.AspNetCore.Components.Routing
@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.Common.SemControlBase
@inject NavigationManager NavManager

@if (Visible)
{
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    @if (CloseIcon != ModalCloseIcon.None)
    {
      <i class="close @(CloseIcon == ModalCloseIcon.Inside ? "inside" : "") icon"></i>
    }
    <div class="@HeaderClass header">
      @Header
    </div>
    <div class="@ContentClass content">
      @Content
    </div>
    <div class="@ActionsClass actions">
      @Actions
    </div>
  </div>
}

@code {
  [Parameter] public RenderFragment Header { get; set; }
  [Parameter] public RenderFragment Content { get; set; }
  [Parameter] public RenderFragment Actions { get; set; }
  [Parameter] public ModalSize? Size { get; set; }
  [Parameter] public string HeaderClass { get; set; }
  [Parameter] public string ContentClass { get; set; }
  [Parameter] public string ActionsClass { get; set; }
  [Parameter] public bool AllowMultiple { get; set; }
  [Parameter] public bool Closable { get; set; } = true;
  [Parameter] public ModalCloseIcon CloseIcon { get; set; } = ModalCloseIcon.Outside;

  /*
    TODO: Not implemented parameters:
    - scrolling
    - basic
  */

  public SemModal()
  {
    ClassMapper
      .Add("ui")
      .Get(() => Size?.ToString().ToLower())
      .Add("modal");
  }
  public async Task Show()
  {
    await JsFunc.Modal.Show(JsRuntime, Id, AllowMultiple, Closable);
  }
  public async Task Hide()
  {
    await JsFunc.Modal.Hide(JsRuntime, Id);
  }
  public async Task SubmitForm()
  {
    await JsFunc.Modal.SubmitForm(JsRuntime, Id);
  }
  
  private string currentUri;

  protected override void OnInitialized()
  {
    currentUri = NavManager.Uri;
    NavManager.LocationChanged += OnLocationChanged;
  }

  private void OnLocationChanged(object sender, LocationChangedEventArgs e)
  {
    if (currentUri != e.Location)
    {
      Hide();
    }
    currentUri = e.Location;
  }

  public void Dispose()
  {
    NavManager.LocationChanged -= OnLocationChanged;
  }
}
