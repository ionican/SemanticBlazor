@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.Common.SemControlBase

@if (Visible)
{
  @if (MenuPosition == TabMenuPosition.Bottom)
  {
    <CascadingValue Value="this">
      @Tabs
    </CascadingValue>
  }
  <SemMenu Id="@Id" Class="@ClassMapper.ToString()" Style="@Style" Size="@Size" Color="@Color" @attributes="Attributes">
    @foreach (var tab in _localTabs.Where(tab => tab.Visible))
    {
      <SemMenuItem Class="@(tab.Active ? "active " : " " + " " + @tab.MenuItemClass)" Style="@tab.MenuItemStyle" data-tab="@(tab.Enabled ? tab.TabName : "")" Enabled="@tab.Enabled" OnClick="@((() => SetActiveTab(tab)))">
        @if (tab.MenuContent != null)
        {
          @tab.MenuContent
        }
        else
        {
          @(tab.Text ?? tab.Name)
        }
      </SemMenuItem>
    }
  </SemMenu>
  @if (MenuPosition == TabMenuPosition.Top)
  {
    <CascadingValue Value="this">
      @Tabs
    </CascadingValue>
  }
}

@code {
  [Parameter]
  public RenderFragment Tabs { get; set; }
  [Parameter]
  public TabMenuPosition MenuPosition { get; set; } = TabMenuPosition.Top;
  [Parameter]
  public Color? Color { get; set; }
  [Parameter]
  public Size? Size { get; set; }
  [Parameter]
  public MenuClass[] Classes { get; set; }
  [Parameter]
  public EventCallback<SemTab> ActiveTabChanged { get; set; }
  private List<SemTab> _localTabs = new List<SemTab>();

  public SemTabs()
  {
    ClassMapper
      .Get(() => Enums.GetClasses(Classes))
      .Get(() => MenuPosition.ToString().ToLower())
      .Add("attached tabular");
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await InitTabs();
    }
    await base.OnAfterRenderAsync(firstRender);
  }

  internal override void RegisterChildControl(object control)
  {
    if (control.GetType() == typeof(SemTab))
    {
      _localTabs.Add((SemTab) control);
    }
  }

  public async Task InitTabs()
  {
    if (_localTabs.Count > 0 && !_localTabs.Any(t => t.Active && t.Visible))
    {
      var firstTab = _localTabs.FirstOrDefault(t => t.Visible && t.Enabled);
      if (firstTab != null)
      {
        await SetActiveTab(firstTab);
      }
      StateHasChanged();
    }
    await JsFunc.TabularMenu.Init(JsRuntime, Id);
  }

  private async Task SetActiveTab(SemTab tab)
  {
    _localTabs.ForEach(t => t.Active = false);
    var requestedTab = _localTabs.FirstOrDefault(t => t == tab);
    if (requestedTab != null) requestedTab.Active = true;
    await ActiveTabChanged.InvokeAsync(tab);
  }

  public async Task SetActiveTab(string tabName)
  {
    var tab = _localTabs.FirstOrDefault(t => t.Name == tabName);
    if (tab == null) throw new ArgumentException($"Tab \"{tabName}\" does not exists");
    await SetActiveTab(tab);
    StateHasChanged();
  }

  public SemTab GetActiveTab()
  {
    return _localTabs.FirstOrDefault(t => t.Active);
  }
}