@typeparam ValueType
@inherits SemInputControlBase<ValueType>

@if (Visible)
{
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    @if (Clearable && Enabled && !String.IsNullOrEmpty(Value?.ToString()))
    {
      <SemIcon Icon="SemanticBlazor.Icon.X_Icon" @onclick="ClearValue" />
    }
    else if (Icon != null)
    {
      <SemIcon Icon="@Icon" />
    }
    @if (InputType == "number")
    {
      <input id="inpt_@Id" type="@InputType" value="@_value" @onchange="OnValueChanged" placeholder="@Placeholder" @onkeypress="KeyPressed" class="@InputClass" style="@InputStyle" @attributes="disabledAttribute"
             step="@(NumberStep?.ToString().Replace(",", "."))" max="@(NumberMax?.ToString().Replace(",", "."))" min="@(NumberMin?.ToString().Replace(",", "."))" />
    }
    else
    {
      <input id="inpt_@Id" type="@InputType" value="@_value" @onchange="OnValueChanged" placeholder="@Placeholder" @onkeypress="KeyPressed" class="@InputClass" style="@InputStyle" @attributes="disabledAttribute" />
    }
  </div>
}

@code {
  [Parameter] public EventCallback EnterPressed { get; set; }
  [Parameter] public Icon? Icon { get; set; }
  [Parameter] public IconPosition? IconPosition { get; set; } = SemanticBlazor.IconPosition.Left;
  [Parameter] public bool Clearable { get; set; }
  [Parameter] public string Placeholder { get; set; }
  [Parameter] public bool IsPassword { get; set; }
  [Parameter] public decimal? NumberStep { get; set; } = 1;
  [Parameter] public decimal? NumberMin { get; set; }
  [Parameter] public decimal? NumberMax { get; set; }
  [Parameter] public string InputClass { get; set; }
  [Parameter] public string InputStyle { get; set; }
  [Parameter] public InputSize? Size { get; set; }
  [Parameter] public InputClass[] Classes { get; set; }

  public SemInput()
  {
    ClassMapper
      .Add("ui input")
      .Get(() => Enums.GetClasses(Classes))
      .GetIf(() => Enums.GetClass(IconPosition), () => Icon != null)
      .If("icon", () => Icon != null || Clearable)
      .Get(() => Size?.ToString().ToLower());
  }
  private string _value
  {
    get
    {
      if (typeof(ValueType) == typeof(decimal?) || typeof(ValueType) == typeof(decimal))
      {
        return Value?.ToString().Replace(",", ".");
      }
      else
      {
        return Value?.ToString();
      }
    }
  }
  public string InputType
  {
    get
    {
      var tValuetypeCode = Type.GetTypeCode(typeof(ValueType));

      if (tValuetypeCode == TypeCode.String)
      {
        if (!IsPassword)
        {
          return "text";
        }
        else
        {
          return "password";
        }
      }
      else if (tValuetypeCode == TypeCode.Int16
        || tValuetypeCode == TypeCode.Int32
        || tValuetypeCode == TypeCode.Int64
        || tValuetypeCode == TypeCode.Decimal
        || tValuetypeCode == TypeCode.Double
        || tValuetypeCode == Type.GetTypeCode(typeof(Nullable<Int32>)))
      {
        return "number";
      }
      else if (tValuetypeCode == TypeCode.DateTime)
      {
        return "date";
      }
      else
      {
        return "text";
      }
    }
  }
  async Task OnValueChanged(ChangeEventArgs e)
  {
    if (typeof(ValueType) == typeof(int?) || typeof(ValueType) == typeof(int))
    {
      int val = 0;
      if (Int32.TryParse(e.Value.ToString(), out val))
      {
        Value = (ValueType)(object)val;
      }
      else
      {
        Value = (ValueType)default;
      }
    }
    else if (typeof(ValueType) == typeof(decimal?) || typeof(ValueType) == typeof(decimal))
    {
      decimal val = 0;
      if (Decimal.TryParse(e.Value.ToString().Replace(".", ","), out val))
      {
        Value = (ValueType)(object)val;
      }
      else
      {
        Value = (ValueType)default;
      }
    }
    else
    {
      Value = (ValueType)Convert.ChangeType(e.Value.ToString(), typeof(ValueType));
    }

    await NotifyChanged();
  }
  async Task KeyPressed(KeyboardEventArgs e)
  {
    if (e.Key.ToLowerInvariant() == "enter")
    {
      await EnterPressed.InvokeAsync(null);
    }
  }
}
