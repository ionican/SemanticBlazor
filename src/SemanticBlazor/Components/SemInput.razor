@typeparam TValue
@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.Common.SemInputControlBase<TValue>

@if (Visible)
{
  <div id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
    @if (Clearable && Enabled && !String.IsNullOrEmpty(Value?.ToString()))
    {
      <SemIcon Icon="SemanticBlazor.Icon.X_Icon" @onclick="ClearValue"/>
    }
    else if (Icon != null)
    {
      <SemIcon Icon="@Icon"/>
    }
    @if (InputType == "number")
    {
      <input id="inpt_@Id" type="@InputType" value="@StringValue" @onchange="OnValueChanged" placeholder="@Placeholder" @onkeydown="KeyPressed" class="@InputClass" style="@InputStyle" @attributes="@DisabledAttribute"
             step="@(NumberStep?.ToString().Replace(",", "."))" max="@(NumberMax?.ToString().Replace(",", "."))" min="@(NumberMin?.ToString().Replace(",", "."))"/>
    }
    else if (InputType == "textarea")
    {
      <textarea id="inpt_@Id" value="@StringValue" @onchange="OnValueChanged" placeholder="@Placeholder" @onkeydown="KeyPressed" class="@InputClass" style="@InputStyle" rows="@Rows" @attributes="@DisabledAttribute"></textarea>
    }
    else
    {
      <input id="inpt_@Id" type="@InputType" value="@StringValue" @onchange="OnValueChanged" placeholder="@Placeholder" @onkeydown="KeyPressed" class="@InputClass" style="@InputStyle" @attributes="@DisabledAttribute"/>
    }
  </div>
}

@code {
  [Parameter]
  public EventCallback EnterPressed { get; set; }
  [Parameter]
  public Icon? Icon { get; set; }
  [Parameter]
  public IconPosition? IconPosition { get; set; } = SemanticBlazor.IconPosition.Left;
  [Parameter]
  public bool Clearable { get; set; }
  [Parameter]
  public string Placeholder { get; set; }
  [Parameter]
  public bool IsPassword { get; set; }
  [Parameter]
  public decimal? NumberStep { get; set; } = 1;
  [Parameter]
  public decimal? NumberMin { get; set; }
  [Parameter]
  public decimal? NumberMax { get; set; }
  [Parameter]
  public string InputClass { get; set; }
  [Parameter]
  public string InputStyle { get; set; }
  [Parameter]
  public InputSize? Size { get; set; }
  [Parameter]
  public InputClass[] Classes { get; set; }
  [Parameter]
  public int Rows { get; set; } = 1;

  public SemInput()
  {
    ClassMapper
      .Add("ui input")
      .Get(() => Enums.GetClasses(Classes))
      .GetIf(() => Enums.GetClass(IconPosition), () => Icon != null)
      .If("icon", () => Icon != null || Clearable)
      .Get(() => Size?.ToString().ToLower());
  }

  private string StringValue
  {
    get
    {
      if (typeof(TValue) == typeof(decimal?) || typeof(TValue) == typeof(decimal))
      {
        return Value?.ToString().Replace(",", ".");
      }
      return Value?.ToString();
    }
  }
  
  private string InputType
  {
    get
    {
      var tValueTypeCode = Type.GetTypeCode(typeof(TValue));
      if (tValueTypeCode == TypeCode.String)
      {
        if (IsPassword) return "password";
        if (Rows > 1) return "textarea";
        return "text";
      }
      if (tValueTypeCode == TypeCode.Int16
          || tValueTypeCode == TypeCode.Int32
          || tValueTypeCode == TypeCode.Int64
          || tValueTypeCode == TypeCode.Decimal
          || tValueTypeCode == TypeCode.Double
          || tValueTypeCode == Type.GetTypeCode(typeof(int?)))
      {
        return "number";
      }
      if (tValueTypeCode == TypeCode.DateTime)
      {
        return "date";
      }
      return "text";
    }
  }

  async Task OnValueChanged(ChangeEventArgs e)
  {
    if (typeof(TValue) == typeof(int?) || typeof(TValue) == typeof(int))
    {
      if (Int32.TryParse(e.Value.ToString(), out var val))
      {
        Value = (TValue) (object) val;
      }
      else
      {
        Value = default;
      }
    }
    else if (typeof(TValue) == typeof(decimal?) || typeof(TValue) == typeof(decimal))
    {
      if (Decimal.TryParse(e?.Value?.ToString(), out var val)) //.Replace(".", ",")
      {
        Value = (TValue) (object) val;
      }
      else if (Decimal.TryParse(e?.Value?.ToString()?.Replace(".", ","), out val))
      {
        Value = (TValue) (object) val;
      }
      else
      {
        Value = default;
      }
    }
    else if (typeof(TValue) == typeof(double?) || typeof(TValue) == typeof(double))
    {
      if (Double.TryParse(e?.Value?.ToString(), out var val)) //.Replace(".", ",")
      {
        Value = (TValue) (object) val;
      }
      else if (Double.TryParse(e?.Value?.ToString()?.Replace(".", ","), out val))
      {
        Value = (TValue) (object) val;
      }
      else
      {
        Value = default;
      }
    }
    else
    {
      Value = (TValue) Convert.ChangeType(e?.Value?.ToString(), typeof(TValue));
    }

    await NotifyChanged();
  }

  async Task KeyPressed(KeyboardEventArgs e)
  {
    if (e?.Key?.ToLowerInvariant() == "enter")
    {
      await EnterPressed.InvokeAsync(null);
    }
  }

}