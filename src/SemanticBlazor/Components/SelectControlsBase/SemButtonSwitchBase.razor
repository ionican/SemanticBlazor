@typeparam ItemType
@typeparam ValueType
@inherits SelectControlsBase.SemSelectControlBase<ItemType, ValueType>

@if (Visible)
{
  <CascadingValue Value="@this">
    @ListItems
  </CascadingValue>
  @if (!loading)
  {
    <div class="@ClassMapper.ToString()" style="@Style">
      @if (Items != null)
      {
        @foreach (var item in Items)
        {
          <SemButton OnClick="@(() => ButtonClicked(GetItemKey(item)))" Enabled="@Enabled" Class="@(Value != null && GetItemKey(GetItemFromValue(Value)) == GetItemKey(item) ? "active" : "")">
            @if (ItemTemplate != null)
            {
              @ItemTemplate(item)
            }
            else
            {
              @(GetItemText(item))
            }
          </SemButton>
        }
      }
    </div>
  }
  else
  {
    <div class="@ClassMapper.ToString()" style="@Style">
      <SemButton Class="loading" Enabled="false" Style="min-width: 100px">Loading...</SemButton>
    </div>
  }
}

@code {
  [Parameter] public ButtonColor? Color { get; set; }
  [Parameter] public Size? Size { get; set; }
  [Parameter] public ButtonClass[] Classes { get; set; }

  public virtual Func<ItemType, ValueType> ValueSelector { get; set; }

  protected ItemType GetItemFromValue(ValueType value) => SemDataSelectControlHelper<ItemType, ValueType>.GetItemFromValue(value, Items, ValueSelector);
  protected object ConvertValue(object newValue) => SemDataSelectControlHelper<ItemType, ValueType>.ConvertValue(newValue, Items, ItemKey, ValueSelector);
  protected override string GetItemText(ItemType item) => SemDataSelectControlHelper<ItemType, ValueType>.GetItemText(item, ItemText);
  protected override string GetItemKey(ItemType item) => SemDataSelectControlHelper<ItemType, ValueType>.GetItemKey(item, Items, ItemKey);

  public SemButtonSwitchBase()
  {
    ClassMapper
    .Add("ui buttons")
    .Get(() => Enums.GetClasses(Classes))
    .Get(() => Color?.ToString().ToLower())
    .Get(() => Size?.ToString().ToLower());
  }
  async Task ButtonClicked(string value)
  {
    Value = (ValueType)ConvertValue(value);
    await NotifyChanged();
  }
}
