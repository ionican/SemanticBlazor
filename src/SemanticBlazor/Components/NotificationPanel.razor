@inject NotificationService NotificationService
@using System.Threading
@using System.Linq
@using System.Runtime.InteropServices.ComTypes
@using SemanticBlazor.Services
@inherits SemanticBlazor.Components.Base.Common.SemControlBase
@implements IDisposable;

@if (Visible)
{
  <div class="notifications @Class" style="@Style" @attributes="Attributes">
    @foreach (var item in Notifications)
    {
      <div class="ui raised @item.Color segment" id="@item.Id">
        <a @onclick="@(() => HideNotification(item.Id))">
          <SemIcon Class="close"></SemIcon>
        </a>
        <div class="header">
          @if (item.Icon != null)
          {
            <SemIcon Icon="item.Icon" class="@item.Color"></SemIcon>
          }
          <b>@item.Title</b>
        </div>
        <p>
          @((MarkupString) item.Message)
        </p>
      </div>
    }
    @if (Notifications.Count > 1)
    {
      <SemButton Class="icon labeled" OnClick="ClearAll"><SemIcon Class="delete"/>@ClearAllText</SemButton>
    }
  </div>
}

@code {
  [Parameter]
  public string ClearAllText { get; set; } = "Clear all";
  private List<NotificationModel> Notifications { get; set; } = new List<NotificationModel>();
  private Timer _timer;

  protected override void OnInitialized()
  {
    NotificationService.OnShow += ShowNotification;
  }

  void ShowNotification(NotificationModel notification)
  {
    Notifications.Insert(0, notification);
    StateHasChanged();
    
    if (_timer == null)
    {
      _timer = new Timer(_ => HideExpiredNotifications(), null, 1000, 1000);
    }
  }

  void HideExpiredNotifications()
  {
    var toBeRemoved = Notifications.Where(n => n.Expiration < DateTime.Now).ToList();
    if (toBeRemoved.Count > 0)
    {
      Notifications.RemoveAll(n => n.Expiration < DateTime.Now);
    }
    if (Notifications.Count == 0)
    {
      _timer.Dispose();
      _timer = null;
      Notifications.Clear();
    }
    InvokeAsync(StateHasChanged);
  }

  void HideNotification(string id)
  {
    var notification = Notifications.FirstOrDefault(n => n.Id == id);
    if (notification != null)
    {
      Notifications.Remove(notification);
    }
    StateHasChanged();
  }

  void ClearAll()
  {
    Notifications.Clear();
    StateHasChanged();
  }

  public void Dispose()
  {
    _timer?.Dispose();
  }

}