@typeparam TItem
@typeparam TValue
@using SemanticBlazor.Mappers
@inherits SemSelectControlBase<TItem, TValue>

@if (Visible)
{
  <CascadingValue Value="@(this)">
    @ListItems
  </CascadingValue>
  @if (!Loading)
  {
    <div class="@ClassMapper.ToString()" style="@Style">
      @if (Items != null)
      {
        @foreach (var item in Items)
        {
          <SemButton OnClick="@(() => ButtonClicked(GetItemKey(item)))" Enabled="@Enabled" Class="@(Value != null && GetItemKey(GetItemFromValue(Value)) == GetItemKey(item) ? "active" : "")">
            @if (ItemTemplate != null)
            {
              @ItemTemplate(item)
            }
            else
            {
              @(GetItemText(item))
            }
          </SemButton>
        }
      }
    </div>
  }
  else
  {
    <div class="@ClassMapper.ToString()" style="@Style">
      <SemButton Class="loading" Enabled="false" Style="min-width: 100px">Loading...</SemButton>
    </div>
  }
}

@code {
  [Parameter] public ButtonColor? Color { get; set; }
  [Parameter] public Size? Size { get; set; }
  [Parameter] public ButtonClass[] Classes { get; set; }

  public virtual Func<TItem, TValue> ValueSelector { get; set; }

  private TItem GetItemFromValue(TValue value) => SemDataSelectControlHelper<TItem, TValue>.GetItemFromValue(value, Items, ValueSelector);
  private object ConvertValue(object newValue) => SemDataSelectControlHelper<TItem, TValue>.ConvertValue(newValue, Items, ItemKey, ValueSelector);
  protected override string GetItemText(TItem item) => SemDataSelectControlHelper<TItem, TValue>.GetItemText(item, ItemText);
  protected override string GetItemKey(TItem item) => SemDataSelectControlHelper<TItem, TValue>.GetItemKey(item, Items, ItemKey);

  public SemButtonSwitchBase()
  {
    ClassMapper
    .Add("ui buttons")
    .Get(() => Enums.GetClasses(Classes))
    .Get(() => Color?.ToString().ToLower())
    .Get(() => Size?.ToString().ToLower());
  }
  protected override async Task OnParametersSetAsync()
  {
    SelectedItem = Value != null ? GetItemFromValue(Value) : default;
    await base.OnParametersSetAsync();
  }
  protected override async Task ItemsLoaded()
  {
    if (Value != null)
    {
      SelectedItem = GetItemFromValue(Value);
    }
    if (Items != null)
    {
      if (Items.All(i => GetItemKey(i) != GetItemKey(SelectedItem)))
      {
        await ClearValue();
      }
    }
  }
  async Task ButtonClicked(string value)
  {
    Value = (TValue)ConvertValue(value);
    await NotifyChanged();
  }
}
